package com.psi.revenue.assurance.m;

import com.tlc.common.DataRow;
import com.tlc.common.DataRowCollection;
import com.tlc.common.LongUtil;
import com.tlc.common.SystemInfo;
import com.tlc.gui.modules.common.ModelCollection;
import com.tlc.gui.modules.common.ReportItem;

@SuppressWarnings("serial")
public class TransactionSummaryCollection extends ModelCollection {
	protected String datefrom;
	protected String dateto;
	@Override
	public boolean hasRows() {
		DataRowCollection r = SystemInfo.getDb().QueryDataRows("SELECT SYSDATE TIMESTAMP,'WALLET ALLOCATION' TYPE,'CASH' ACCOUNTTYPE,CASE WHEN SUCCESSCOUNT IS NULL THEN 0 ELSE SUCCESSCOUNT END SUCCESSCOUNT,CASE WHEN SUCCESSAMOUNT IS NULL THEN 0 ELSE SUCCESSAMOUNT END SUCCESSAMOUNT,CASE WHEN FAILEDCOUNT IS NULL THEN 0 ELSE FAILEDCOUNT END FAILEDCOUNT,CASE WHEN FAILEDAMOUNT IS NULL THEN 0 ELSE FAILEDAMOUNT END FAILEDAMOUNT,CASE WHEN PENDINGCOUNT IS NULL THEN 0 ELSE PENDINGCOUNT END PENDINGCOUNT,CASE WHEN PENDINGAMOUNT IS NULL THEN 0 ELSE PENDINGAMOUNT END PENDINGAMOUNT,(CASE WHEN SUCCESSAMOUNT IS NULL THEN 0 ELSE SUCCESSAMOUNT END + CASE WHEN FAILEDAMOUNT IS NULL THEN 0 ELSE FAILEDAMOUNT END )+CASE WHEN PENDINGAMOUNT IS NULL THEN 0 ELSE PENDINGAMOUNT END TOTALAMOUNT, (CASE WHEN SUCCESSCOUNT IS NULL THEN 0 ELSE SUCCESSCOUNT END + CASE WHEN FAILEDCOUNT IS NULL THEN 0 ELSE FAILEDCOUNT END )+ CASE WHEN PENDINGCOUNT IS NULL THEN 0 ELSE PENDINGCOUNT END TOTALCOUNT FROM("
															  	+" SELECT  SYSDATE ,'WALLET' TYPE ,'CASH' ACCOUNTTYPE,COUNT(1) SUCCESSCOUNT, SUM(AMOUNT) SUCCESSAMOUNT FROM(SELECT T.* FROM  ADMDBMC.TBLTRANSACTIONS T  WHERE T.VOIDID IS NULL AND T.MAINWALLET=2  AND  TOALIAS NOT IN ('SOLBPH','RONNA_ONTING') AND MODULE = 1001 AND T.TIMESTAMP BETWEEN TO_DATE(?,'yyyy-MM-dd') AND TO_DATE(?,'yyyy-MM-dd') + 1 ORDER BY T.TIMESTAMP  ASC)  D3  "
																+")A LEFT JOIN "
																+"(SELECT SYSDATE , 'WALLET' TYPE ,'CASH' ACCOUNTTYPE,COUNT(1) FAILEDCOUNT, SUM(AMOUNT) FAILEDAMOUNT FROM (SELECT T.* FROM  ADMDBMC.TBLTRANSACTIONS T  WHERE T.VOIDID IS NOT NULL  AND T.MAINWALLET=2 AND  TOALIAS NOT IN ('SOLBPH','RONNA_ONTING') AND MODULE = 1001 AND T.TIMESTAMP BETWEEN TO_DATE(?,'yyyy-MM-dd') AND TO_DATE(?,'yyyy-MM-dd') + 1 ORDER BY T.TIMESTAMP ASC)  D3  "
																+")B ON A.TYPE = B.TYPE LEFT JOIN "
																+"(SELECT SYSDATE ,'WALLET' TYPE,'CASH' ACCOUNTTYPE,COUNT(1) PENDINGCOUNT,SUM(AMOUNT) PENDINGAMOUNT FROM TBLCASHINTRANSACTIONS WHERE LEVELOFAPPROVAL <> 0 AND TIMESTAMP BETWEEN TO_DATE(?,'yyyy-MM-dd') AND TO_DATE(?,'yyyy-MM-dd') + 1 AND STATUS = 'PNDG' "
																+")C ON A.TYPE = C.TYPE OR B.TYPE = C.TYPE "
																+"UNION ALL "
																+"SELECT SYSDATE TIMESTAMP,'ACCOUNT' TYPE,'CASH' ACCOUNTTYPE,CASE WHEN SUCCESSCOUNT IS NULL THEN 0 ELSE SUCCESSCOUNT END SUCCESSCOUNT,CASE WHEN SUCCESSAMOUNT IS NULL THEN 0 ELSE SUCCESSAMOUNT END SUCCESSAMOUNT,CASE WHEN FAILEDCOUNT IS NULL THEN 0 ELSE FAILEDCOUNT END FAILEDCOUNT,CASE WHEN FAILEDAMOUNT IS NULL THEN 0 ELSE FAILEDAMOUNT END FAILEDAMOUNT,CASE WHEN PENDINGCOUNT IS NULL THEN 0 ELSE PENDINGCOUNT END PENDINGCOUNT,CASE WHEN PENDINGAMOUNT IS NULL THEN 0 ELSE PENDINGAMOUNT END PENDINGAMOUNT,(CASE WHEN SUCCESSAMOUNT IS NULL THEN 0 ELSE SUCCESSAMOUNT END + CASE WHEN FAILEDAMOUNT IS NULL THEN 0 ELSE FAILEDAMOUNT END )+CASE WHEN PENDINGAMOUNT IS NULL THEN 0 ELSE PENDINGAMOUNT END TOTALAMOUNT, (CASE WHEN SUCCESSCOUNT IS NULL THEN 0 ELSE SUCCESSCOUNT END + CASE WHEN FAILEDCOUNT IS NULL THEN 0 ELSE FAILEDCOUNT END )+ CASE WHEN PENDINGCOUNT IS NULL THEN 0 ELSE PENDINGCOUNT END TOTALCOUNT FROM( "
																+"SELECT SYSDATE ,'ACCOUNT' TYPE,'' ACCOUNTTYPE,COUNT(*) SUCCESSCOUNT,0 SUCCESSAMOUNT FROM TBLBRANCHES B INNER JOIN ADMDBMC.TBLACCOUNTINFO AI ON B.ACCOUNTNUMBER = AI.ACCOUNTNUMBER WHERE B.STATUS = 1 AND AI.STATUS = 'ACTIVE' AND AI.ROOT = 2   AND REGDATE BETWEEN TO_DATE(?,'yyyy-MM-dd') AND TO_DATE(?,'yyyy-MM-dd') + 1 "
																+")A LEFT JOIN "
																+"(SELECT SYSDATE ,'ACCOUNT' TYPE,'' ACCOUNTTYPE,COUNT(*) FAILEDCOUNT,0 FAILEDAMOUNT FROM TBLBRANCHES B INNER JOIN ADMDBMC.TBLACCOUNTINFOPNDG AI ON B.ACCOUNTNUMBER = AI.ACCOUNTNUMBER WHERE B.STATUS <> 1 AND KYCSTATUS = 'REJECTED'   AND REGDATE BETWEEN TO_DATE(?,'yyyy-MM-dd') AND TO_DATE(?,'yyyy-MM-dd') + 1 "
																+")B ON A.TYPE = B.TYPE LEFT JOIN "
																+"(SELECT SYSDATE ,'ACCOUNT' TYPE,'' ACCOUNTTYPE,COUNT(*) PENDINGCOUNT,0 PENDINGAMOUNT FROM TBLBRANCHES B INNER JOIN ADMDBMC.TBLACCOUNTINFOPNDG AI ON B.CONTACTNUMBER = AI.MSISDN WHERE B.STATUS = 3    AND REGDATE BETWEEN TO_DATE(?,'yyyy-MM-dd') AND TO_DATE(?,'yyyy-MM-dd') + 1 "
																+")C ON A.TYPE = C.TYPE OR B.TYPE = C.TYPE "
																+"UNION ALL "
																+"SELECT SYSDATE ,'AIRTIME' TYPE,'CASH' ACCOUNTTYPE,CASE WHEN SUCCESSCOUNT IS NULL THEN 0 ELSE SUCCESSCOUNT END SUCCESSCOUNT,CASE WHEN SUCCESSAMOUNT IS NULL THEN 0 ELSE SUCCESSAMOUNT END SUCCESSAMOUNT,CASE WHEN FAILEDCOUNT IS NULL THEN FAILEDCOUNT ELSE FAILEDCOUNT END FAILEDCOUNT,CASE WHEN FAILEDAMOUNT IS NULL THEN 0 ELSE FAILEDAMOUNT END FAILEDAMOUNT,0 PENDINGCOUNT,0 PENDINGAMOUNT,(CASE WHEN SUCCESSAMOUNT IS NULL THEN 0 ELSE SUCCESSAMOUNT END + CASE WHEN FAILEDAMOUNT IS NULL THEN 0 ELSE FAILEDAMOUNT END )+ 0 TOTALAMOUNT, (CASE WHEN SUCCESSCOUNT IS NULL THEN 0 ELSE SUCCESSCOUNT END + CASE WHEN FAILEDCOUNT IS NULL THEN 0 ELSE FAILEDCOUNT END )+ 0 TOTALCOUNT FROM( "
																+"SELECT  SYSDATE ,'AIRTIME' TYPE ,'CASH' ACCOUNTTYPE,COUNT(1) SUCCESSCOUNT, SUM(AMOUNT) SUCCESSAMOUNT FROM (SELECT  T.* FROM  ADMDBMC.TBLTRANSACTIONS T WHERE T.VOIDID IS NULL AND T.MAINWALLET = 2 AND FRALIAS NOT IN ('SOLBPH','RONNA_ONTING') AND  MODULE = 1002 AND T.TIMESTAMP BETWEEN TO_DATE(?,'yyyy-MM-dd') AND TO_DATE(?,'yyyy-MM-dd') + 1 AND REFERENCEID NOT IN ('1051711230000038','1051711240000000') ORDER BY T.TIMESTAMP ASC )  D3 "
																+")A LEFT JOIN "
																+"(SELECT SYSDATE , 'AIRTIME' TYPE ,'CASH' ACCOUNTTYPE,COUNT(1) FAILEDCOUNT, SUM(AMOUNT) FAILEDAMOUNT FROM (SELECT T.* FROM  ADMDBMC.TBLTRANSACTIONS T  WHERE T.VOIDID IS NOT NULL AND T.MAINWALLET = 2  AND FRALIAS NOT IN ('SOLBPH','RONNA_ONTING') AND MODULE = 1002 AND T.TIMESTAMP BETWEEN TO_DATE(?,'yyyy-MM-dd') AND TO_DATE(?,'yyyy-MM-dd') + 1 ORDER BY T.TIMESTAMP ASC )  D3 "
																+")B ON A.TYPE = B.TYPE "
																+"UNION ALL "
																+"SELECT SYSDATE ,'ECASH' TYPE,'CASH' ACCOUNTTYPE,CASE WHEN SUCCESSCOUNT IS NULL THEN 0 ELSE SUCCESSCOUNT END SUCCESSCOUNT,CASE WHEN SUCCESSAMOUNT IS NULL THEN 0 ELSE SUCCESSAMOUNT END SUCCESSAMOUNT,CASE WHEN FAILEDCOUNT IS NULL THEN FAILEDCOUNT ELSE FAILEDCOUNT END FAILEDCOUNT,CASE WHEN FAILEDAMOUNT IS NULL THEN 0 ELSE FAILEDAMOUNT END FAILEDAMOUNT,0 PENDINGCOUNT,0 PENDINGAMOUNT,(CASE WHEN SUCCESSAMOUNT IS NULL THEN 0 ELSE SUCCESSAMOUNT END + CASE WHEN FAILEDAMOUNT IS NULL THEN 0 ELSE FAILEDAMOUNT END )+ 0 TOTALAMOUNT, (CASE WHEN SUCCESSCOUNT IS NULL THEN 0 ELSE SUCCESSCOUNT END + CASE WHEN FAILEDCOUNT IS NULL THEN 0 ELSE FAILEDCOUNT END )+ 0 TOTALCOUNT FROM( "
																+"SELECT  SYSDATE ,'ECASH' TYPE ,'CASH' ACCOUNTTYPE,COUNT(1) SUCCESSCOUNT, SUM(AMOUNT) SUCCESSAMOUNT FROM (SELECT T.* FROM  ADMDBMC.TBLTRANSACTIONS T  WHERE T.VOIDID IS NULL AND T.MAINWALLET = 2 AND FRALIAS NOT IN ('SOLBPH','RONNA_ONTING') AND  MODULE = 1102 AND T.TIMESTAMP BETWEEN TO_DATE(?,'yyyy-MM-dd') AND TO_DATE(?,'yyyy-MM-dd') + 1 ORDER BY T.TIMESTAMP ASC )  D3 "
																+")A LEFT JOIN "
																+"(SELECT SYSDATE , 'ECASH' TYPE ,'CASH' ACCOUNTTYPE,COUNT(1) FAILEDCOUNT, SUM(AMOUNT) FAILEDAMOUNT FROM (SELECT T.* FROM   ADMDBMC.TBLTRANSACTIONS T  WHERE T.VOIDID IS NOT NULL AND T.MAINWALLET = 2 AND FRALIAS NOT IN ('SOLBPH','RONNA_ONTING')  AND  MODULE = 1102 AND T.TIMESTAMP BETWEEN TO_DATE(?,'yyyy-MM-dd') AND TO_DATE(?,'yyyy-MM-dd') + 1 ORDER BY T.TIMESTAMP ASC )  D3 "
																+")B ON A.TYPE = B.TYPE "
																+"UNION ALL "
																+"SELECT SYSDATE ,'BILLS' TYPE,'CASH' ACCOUNTTYPE,CASE WHEN SUCCESSCOUNT IS NULL THEN 0 ELSE SUCCESSCOUNT END SUCCESSCOUNT,CASE WHEN SUCCESSAMOUNT IS NULL THEN 0 ELSE SUCCESSAMOUNT END SUCCESSAMOUNT,CASE WHEN FAILEDCOUNT IS NULL THEN FAILEDCOUNT ELSE FAILEDCOUNT END FAILEDCOUNT,CASE WHEN FAILEDAMOUNT IS NULL THEN 0 ELSE FAILEDAMOUNT END FAILEDAMOUNT,0 PENDINGCOUNT,0 PENDINGAMOUNT,(CASE WHEN SUCCESSAMOUNT IS NULL THEN 0 ELSE SUCCESSAMOUNT END + CASE WHEN FAILEDAMOUNT IS NULL THEN 0 ELSE FAILEDAMOUNT END )+ 0 TOTALAMOUNT, (CASE WHEN SUCCESSCOUNT IS NULL THEN 0 ELSE SUCCESSCOUNT END + CASE WHEN FAILEDCOUNT IS NULL THEN 0 ELSE FAILEDCOUNT END )+ 0 TOTALCOUNT FROM( "
																+"SELECT  'BILLS' TYPE , 'CASH' ACCOUNTTYPE,COUNT(1) SUCCESSCOUNT, SUM(AMOUNT) SUCCESSAMOUNT FROM(SELECT T.* FROM  ADMDBMC.TBLTRANSACTIONS T  WHERE T.VOIDID IS NULL AND T.MAINWALLET = 2 AND FRALIAS NOT IN ('SOLBPH','RONNA_ONTING') AND  MODULE IN (1003,1103) AND T.TIMESTAMP BETWEEN TO_DATE(?,'yyyy-MM-dd') AND TO_DATE(?,'yyyy-MM-dd') + 1 AND T.REFERENCEID NOT IN ('1051801180000060','1051801180000058','1051801180000057','1051801190000034') ORDER BY T.TIMESTAMP ASC ) D3 "
																+")A LEFT JOIN "
																+"(SELECT  'BILLS' TYPE , 'CASH' ACCOUNTTYPE,COUNT(1) FAILEDCOUNT, SUM(AMOUNT) FAILEDAMOUNT FROM (SELECT T.* FROM  ADMDBMC.TBLTRANSACTIONS T  WHERE T.VOIDID IS NOT NULL AND T.MAINWALLET = 2 AND FRALIAS NOT IN ('SOLBPH','RONNA_ONTING') AND  MODULE IN (1003,1103)  AND T.TIMESTAMP BETWEEN TO_DATE(?,'yyyy-MM-dd') AND TO_DATE(?,'yyyy-MM-dd') + 1 ORDER BY T.TIMESTAMP ASC )  D3 ) B "
																+"ON A.TYPE = B.TYPE",this.datefrom,this.dateto,this.datefrom,this.dateto,this.datefrom,this.dateto,this.datefrom,this.dateto,this.datefrom,this.dateto,this.datefrom,this.dateto,this.datefrom,this.dateto,this.datefrom,this.dateto,this.datefrom,this.dateto,this.datefrom,this.dateto,this.datefrom,this.dateto,this.datefrom,this.dateto);
	     
	     if (!r.isEmpty())
	     {
	    	 for(DataRow row: r){
	    		 ReportItem m = new ReportItem();
	    		 for (String key : row.keySet()) {
			 	        m.setProperty(key, row.getString(key).toString());
			 	 }
	    		 m.setProperty("SUCCESSAMOUNT", row.getString("SUCCESSAMOUNT") == null ? "0.00" : LongUtil.toString(Long.parseLong(row.getString("SUCCESSAMOUNT").toString())));
	    		 m.setProperty("FAILEDAMOUNT", row.getString("FAILEDAMOUNT") == null ? "0.00" : LongUtil.toString(Long.parseLong(row.getString("FAILEDAMOUNT").toString())));
	    		 m.setProperty("PENDINGAMOUNT", row.getString("PENDINGAMOUNT") == null ? "0.00" : LongUtil.toString(Long.parseLong(row.getString("PENDINGAMOUNT").toString())));
	    		 m.setProperty("TOTALAMOUNT", row.getString("TOTALAMOUNT") == null ? "0.00" : LongUtil.toString(Long.parseLong(row.getString("TOTALAMOUNT").toString())));
		         
		         
		         add(m);
	    	 }
	     }
	     return r.size() > 0;
	}
	public String getDatefrom() {
		return datefrom;
	}
	public void setDatefrom(String datefrom) {
		this.datefrom = datefrom;
	}
	public String getDateto() {
		return dateto;
	}
	public void setDateto(String dateto) {
		this.dateto = dateto;
	}
	
}
